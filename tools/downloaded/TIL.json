[
  {
    "date": "2021-12-17",
    "name": "Lexical scope 예제",
    "category": "clone_coding",
    "description": "정적 스코프 = 함수 선언할 때 스코프 생성",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/LexicalScope.js"
  },
  {
    "date": "2021-12-17",
    "name": "Scope chain 과 prototype chain을 확인",
    "category": "clone_coding",
    "description": "",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/scopeChain_prototypeChainCheck.js"
  },
  {
    "date": "2021-12-17",
    "name": "Component repeat by array map, array fill",
    "category": "clone_coding",
    "description": "",
    "github_link": "",
    "site_link": "",
    "code_link": "",
    "commit_link": "https://github.com/PhilosopherProgrammer/output-training/commit/4fcdd608cd801e97ec712ec12144ed3a0530a432"
  },
  {
    "date": "2021-12-20",
    "name": "array",
    "category": "clone_coding",
    "description": "array built-in function 의 parameter 로 넘긴 함수의 사용 형태 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/anonymousFuncTest.js"
  },
  {
    "date": "2021-12-20",
    "name": "lexical scope",
    "category": "clone_coding",
    "description": "outer Function 안에 예제 넣고 설명 추가",
    "github_link": "",
    "site_link": "",
    "code_link": "",
    "commit_link": "https://github.com/PhilosopherProgrammer/output-training/commit/d97806892df8ab75f424e6bc00fcd6c6fa81fc9b"
  },
  {
    "date": "2021-12-20",
    "name": "scope and closure",
    "category": "clone_coding",
    "description": "함수 안의 함수 nested 하게 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/closure_test2.js"
  },
  {
    "date": "2021-12-20",
    "name": "closure",
    "category": "clone_coding",
    "description": "closure 를 활용한 module pattern 예제로 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/moduleTest1.js"
  },
  {
    "date": "2021-12-20",
    "name": "hoisting",
    "category": "clone_coding",
    "description": "const, let 호이스팅 확인, TDZ 검색",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/JS/hoisting_let_const.js"
  },
  {
    "date": "2021-12-21",
    "name": "bind",
    "category": "clone_coding",
    "description": "bind 해서 돌려받은 함수에 또 bind 하는 방식으로 context 변경 불가. bind clone 함수를 통해 이해",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/ES5/bindTestES5.js"
  },
  {
    "date": "2021-12-22",
    "name": "RxJS",
    "category": "clone_coding",
    "description": "Rxjs observable, observer, subscribe, subscription.unsubscribe() 예제로 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/Rxjs/rxjsTest.js"
  },
  {
    "date": "2021-12-22",
    "name": "Lodash",
    "category": "clone_coding",
    "description": "lodash 가 어떤식으로 구현됐는지 소스 받아서 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/Lodash/lodashTest.js"
  },
  {
    "date": "2021-12-23",
    "name": "Typescript, tsc",
    "category": "clone_coding",
    "description": "typescript, tsc 사용법 확인. ES5, ES2015 등으로 변경해서 코드 확인. decorator 어떻게 구현했는지 구경",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/tree/main/misc/Playground/typescript/decorator"
  },
  {
    "date": "2021-12-23",
    "name": "fs.readFileSync",
    "category": "coding_test",
    "description": "백준 node.js 로 문제풀기 위해 fs.readFileSync 활용법 1000번 문제로 확인",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/ProblemSolving/Algorithm/BOJ/1000.js"
  },
  {
    "date": "2021-12-23",
    "name": "Queue",
    "category": "coding_test",
    "description": "javascript Queue 자료구조 best practice 검색 및 추가",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/ProblemSolving/DataStructure/BestPractice/Stack_Queue/Queue.js"
  },
  {
    "date": "2021-12-24",
    "name": "Typescript static method",
    "category": "clone_coding",
    "description": "typescript static method 어떤식을 구현됐는지 확인 - 생성자 함수에 직접 붙임",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/output-training/blob/main/misc/Playground/typescript/Person.js"
  },
  {
    "date": "2021-12-28",
    "name": "Interactive developer",
    "category": "clone_coding",
    "description": "줄에 매달려 흔들리는 상자 프로젝트",
    "github_link": "",
    "site_link": "https://philosopherprogrammer.github.io/swaying-box-hanging-from-a-string/"
  },
  {
    "date": "2021-12-29",
    "name": "프린터",
    "category": "coding_test",
    "description": "배열의 shift() 사용하지 않고 Linked-list 기반 Queue 사용",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/Coding-Test-Practice/tree/main/CodingTestPlatform/Programmers/Level2/%ED%94%84%EB%A6%B0%ED%84%B0"
  },
  {
    "date": "2021-12-29",
    "name": "다리를 지나는 트럭",
    "category": "coding_test",
    "description": "배열의 shift() 사용하지 않고 Linked-list 기반 Queue 사용",
    "github_link": "",
    "site_link": "",
    "code_link": "https://github.com/PhilosopherProgrammer/Coding-Test-Practice/tree/main/CodingTestPlatform/Programmers/Level2/%EB%8B%A4%EB%A6%AC%EB%A5%BC%EC%A7%80%EB%82%98%EB%8A%94%ED%8A%B8%EB%9F%AD"
  }
]